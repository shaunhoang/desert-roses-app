[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "",
    "section": "",
    "text": "Use this repository to host a website for your CASA0025 final project by following these stpes:\n\nclone this repository\ninstall quarto\nedit the ‚Äòindex.qmd‚Äô file with the contents of your project\nusing terminal, navigate to the project directory and run ‚Äúquarto render‚Äù\npush the changes to your github repository\non github, navigate to Settings&gt;Pages&gt;Build and Deployment. Make sure that under ‚ÄúSource‚Äù it says ‚Äúdeploy from branch‚Äù. Under ‚ÄúBranch‚Äù, select ‚ÄúMain‚Äù in the first dropdown and ‚ÄúDocs‚Äù under the second drop down. Then press ‚ÄúSave‚Äù\n\nYour website should now be available under https://{your_username}.github.io/{your_repo_name}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Monitoring desertification risk in Niger",
    "section": "",
    "text": "üèúÔ∏èProject Desert RoseüèúÔ∏è\nProject team: MASH potatoes (UCL CASA), 2024"
  },
  {
    "objectID": "index.html#i.-overview",
    "href": "index.html#i.-overview",
    "title": "Monitoring desertification risk in Niger",
    "section": "I. Overview",
    "text": "I. Overview\n\nProblem Statement\nNiger, a landlocked country in Africa‚Äôs Sahel region, faces rising temperatures, low rainfall and a decrease in arable land, indicative of desertification. The shrinking land and water sources pose food and water security threats, risking humanitarian crises and conflicts. Initiatives like Action Against Desertification (FAO-UN) with its flaghsip project the Great Green Wall aim to restore degraded land and push back the desert.\nHowever, as each task force operates independently, the nation lacks centralised visibility on nationwide desertification risks, making it difficult to mobilise the action plan with urgency and prioritise resources across diverse actors to the communities most in need.\n\n\nEnd User\nThis application is meant for the local government, NGOs and different organisations so that there is a centralised platform where they can visualise to what extent desertification affects Niger people at high spatial resolution and which areas are seeing desertification worsen over the past decade.\n\n\nData Source\nThree remote sensing Google Earth Engine data sets are used:\n\nTo derive the Desertification Risk Index (detailed methodology below), we used Landsat 8 OLI hyperspectral remote sensing data (2014-2023) containing all the necessary spectral bands for index calculation.\nTo quantify the affected population, we used the WorldPop global population raster data at 100m resolution (2000-2020).\nFinally, to delineate the boundaries of interest, we will use Niger Administrative Boundaries, Level 0 and Level 1.\n\n\n\nMethodology\nAccording to Wu et al.¬†(2019) and Yang et al.¬†(2020), the Desertification Risk Index (DRI), which we have extracted from their Desert Matter Index (DMI), can be calculated using Landsat-8 remote sensing data, from which Albedo and Modified Soil Adjusted Vegetation Index (MSAVI) were calculated. according to the formula:\n\\[ DRI = L_1 = \\sqrt{(MSAVI-1)^2 + Albedo^2} \\]\nThis formula produces values where a higher DRI indicates greater risk of desertification. The use of Euclidean distance in this formula combines the deviations of MSAVI and albedo from their norms, providing a measure that is sensitive to changes in both vegetation cover and surface reflectivity.\n\n\n\nA larger DRI means more degraded soil and higher desertification risk.\n\n\nIt is worth noting that this methodology has shown relatively high accuracy in detecting and classifying desertification in the Naiman Banner in Inner Mongolia (China) but not specifically in the Southern Sahel where Niger is located. However, thanks to the fact that the two areas share similar characteristics in terms of wetness and vegetation, we see the application of this methodology as appropriate for the Southern Sahel region.\n\n\nInterface\nThe user can select the year of interest and then the area of interest to produce various map layers and statistics:\n\nBy default, the map of high-risk areas will be shown, indicating the desertification level only in populated areas, excluding uninhabited lands such as the inner section of the Sahara Desert to the north.\nWhen a region is selected, or an area of interest is drawn, statistics on the average DRI value and the percentage of the affected population will be shown. The user can redraw the area or reset the map anytime.\n\nFinally, other layers of interest are (1) Population density in high-risk areas, (2) DRI nationwide in the year of choice, and (3) Change in DRI nationwide 2014-2023."
  },
  {
    "objectID": "index.html#ii.-the-application",
    "href": "index.html#ii.-the-application",
    "title": "Monitoring desertification risk in Niger",
    "section": "II. The Application",
    "text": "II. The Application"
  },
  {
    "objectID": "index.html#iii.-the-code-behind-the-scene",
    "href": "index.html#iii.-the-code-behind-the-scene",
    "title": "Monitoring desertification risk in Niger",
    "section": "III. The code behind the scene",
    "text": "III. The code behind the scene\nHere are some highlights of what goes on behind the scene of the web app.fontS\n\nCalculating Desertification Risk Index 2014-2023 from Landsat-8 dataset\nFirst, we load the necessary Landsat 8 collection and the boundaries of Niger (level 1 and 0)\n// Load country boundaries\nvar niger = ee.FeatureCollection(\"FAO/GAUL/2015/level0\").filter(ee.Filter.eq('ADM0_CODE', 181));\nvar niger_1 = ee.FeatureCollection(\"FAO/GAUL/2015/level1\").filter(ee.Filter.eq('ADM0_CODE', 181));\nvar nigerGeometry = niger.geometry(); // Convert niger to a geometry for clipping.\nMap.centerObject(niger, 5); // Center the map over Niger\nMap.setOptions('HYBRID')\n\n// Load and filter collection for time period, extent, indices and cloud cover,\nvar composite = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')\n              .filterDate('2014-01-01','2023-12-31')\n              .filterBounds(niger)\n              .select(['SR_B[0-9]*'])\n              ;\nAs explained above, the formula for DRI is:\n\\[ DRI = \\sqrt{(MSAVI-1)^2 + Albedo^2} \\]\nwhere:\n\nAlbedo is a measure of the reflectivity of the Earth‚Äôs surface, ranging from 0 (no reflectivity) to 1 (total reflectivity). It helps understand the Earth‚Äôs energy balance as it indicates how much solar radiation is absorbed versus reflected back into space (Yale, n.d.). High albedo values correlate with highly reflective surfaces (such as flat deserts or snow terrains); low values correlate with poorly reflecting surfaces (such as dense forestation).\n\n\\[ Albedo = 0.356B_{blue} + 0.13B_{red} + 0.373B_{nir} + 0.085B_{swir1} + 0.072B_{swir2} - 0.0018 \\]\n\nModified Soil Adjusted Vegetation Index (MSAVI) is designed to minimise the impact of soil brightness when vegetation is sparse, providing a more accurate vegetation signal. This index is particularly useful in semi-arid regions, such as Niger, where exposed soil can significantly affect the standard vegetation indices like NDVI. Since, it ranges from -1 (non-vegetated areas or sparse vegetation) to 1 (higher levels of vegetation and vegetation health), we adapt this by adding 1 to the value and dividing by 2 to normalise to the 0 to 1 range (same as albedo).\n\n\\[ MSAVI = \\frac{2B_{nir} + 1 - \\sqrt{(2B_{nir} + 1)^2 - 8(B_{nir}-B_{red})}}2 \\]\nThe code below creates a function, which performs the calculation of DRI for the Landsat 8 collection.\n// Function to calculate DRI\nvar calculateIndices = function(image) {\n    // Calculate MSAVI\n    var msavi = image.expression(\n        '(((2 * B5 + 1 - sqrt((2 * B5 + 1)**2 - 8 * (B5 - B4))) / 2) +1)/2', {\n            'B5': image.select('SR_B5'), // NIR\n            'B4': image.select('SR_B4') // Red\n        }).rename('msavi');\n    // MSAVI is the Modified Soil Adjusted Vegetation Index; minimizes the effect of bare soil on the SAVI. Refer to Yang et al (2022).\n    // This equation modifies the typical equation to account for the typical MSAVI range being -1:1; this adapts it to 0:1 by adding 1 to the value and dividing by 2. \n\n    // Calculate Albedo\n    var albedo = image.expression(\n        '((0.356*B2) + (0.130*B4) + (0.373*B5) + (0.085*B6) + (0.072*B7) - 0.0018)*0.0000275 - 0.2', { // adjustments normalise the index to be 0 to 1\n            'B2': image.select('SR_B2'), // Blue\n            'B4': image.select('SR_B4'), // Red\n            'B5': image.select('SR_B5'), // NIR\n            'B6': image.select('SR_B6'), // SWIR1\n            'B7': image.select('SR_B7') // SWIR2\n        }).rename('albedo');\n    // ALbedo gives the proportion of the incident light or radiation that is reflected by a surface. Refer to Yang et al (2022).\n\n    // Calculate DRI\n    var dri = image.expression(\n        'sqrt( (MSAVI - 1)**2 + (Albedo)**2 )/sqrt(2)', {\n            'MSAVI': msavi, // Use the MSAVI band calculated previously\n            'Albedo': albedo // Use the Albedo band calculated previously\n        }).rename('DRI');\n    // DRI formula extracted from Wen et al (2020) and adapted slightly; uses DMI formula. Divide by sqrt(2) to normalise it to 0-1.\n\n    // Return the image with added DRI band\n    return image.addBands([dri, msavi, albedo]).clip(nigerGeometry);\n};\nBefore we applied this function to the collection, we decided to simplify the collection to one image per year to reduce load time whenever a query is made.\n// Simplify collection to years (median) and calculate indices \nvar distinctYears = ee.List.sequence(2014, 2023);\n\nfunction annualComposite(year, month) {\n    var filteredImages = composite.filter(ee.Filter.calendarRange(year, year, 'year'))\n    return filteredImages.median().set({\n        'year': year,\n        'system:time_start': ee.Date.fromYMD(year, 1, 1)\n    });\n}\n\nvar composite_annual = ee.ImageCollection.fromImages(\n    distinctYears.map(function(year) {\n        return annualComposite(year);\n    }).flatten()\n).map(calculateIndices);\nAfter we applied the index calculation, we masked out DRI values less than 0.25 to highlight areas with high risk of desertification.\n// Mask images based on DRI values, highlighted high DRI areas only, excluding first quartile\nfunction maskByDRI(image) {\n    var driMask = image.select('DRI').gte(0.25);\n    return image.updateMask(driMask);\n}\nvar composite_annual_masked = composite_annual.map(maskByDRI);\nWe also added a legend for the DRI value with the corresponding colour scale.\n// Color palette to viz params function\nfunction makeColorBarParams(palette) {\n    return {\n        bbox: [0, 0, 1, 0.1],\n        dimensions: \"100x10\",\n        format: \"png\",\n        min: 0,\n        max: 1,\n        palette: palette.reverse(),\n    };\n}\n\n// Create the color bar for the legend.\nvar colorBar = ui.Thumbnail({\n    image: ee.Image.pixelLonLat().select(0),\n    params: makeColorBarParams(colorlist.reverse()),\n    style: {\n        stretch: \"horizontal\",\n        margin: \"0px 2px\",\n        maxHeight: \"18px\"\n    },\n});\n\n// Create title\nvar legendTitle = ui.Label({\n    value: \"Desertification Risk Index (DRI)\",\n    style: {\n        fontWeight: \"bold\",\n        textAlign: \"center\",\n        stretch: \"horizontal\"\n    },\n});\n\n// Create labels\nvar legendLabels = ui.Panel({\n    widgets: [\n        ui.Label('Low', {\n            margin: \"4px 4px\"\n        }),\n        ui.Label(\" \", {\n            margin: \"4px 4px\",\n            textAlign: \"center\",\n            stretch: \"horizontal\",\n        }),\n        ui.Label('High', {\n            margin: \"4px 4px\"\n        }),\n    ],\n    layout: ui.Panel.Layout.flow(\"horizontal\"),\n});\n\n// Put everything together and add to map\nvar legendPanel = ui.Panel({\n    widgets: [legendTitle, colorBar, legendLabels],\n    style: {\n        position: \"bottom-center\",\n        width: \"300px\"\n    },\n});\n\nMap.add(legendPanel)\n\n\n\nHigh DRI areas with values below 0.25 masked out\n\n\nFinally, to show the change in DRI in the past decade, we also produced a layer for the difference in the DRI across all pixels between 2023 and 2014. From this layer, it is clear to see rapid desertification around the population centres such as Niamey in the southern region. However, areas in the southeastern region around Lake Chad and on the western border with Mali, there seems to be a reversal of desertification.\n// Difference in DRI between 2023 and 2014\nvar image2014 = composite_annual.select('DRI').filterDate('2014-01-01', '2014-12-31').median();\nvar image2023 = composite_annual.select('DRI').filterDate('2023-01-01', '2023-12-31').median();\n\n// Calculate the difference image, mask out small change (within 0.01)\nvar differenceImage = image2023.subtract(image2014);\nvar diff_img = differenceImage.updateMask(differenceImage.gt(0.01).or(differenceImage.lt(-0.01)));\n\n\n\nChange in DRI 2014-2023, with small changes within 0.01 unit filtered out. Darker pixels see an increase, while lighter ones see a decrease in DRI.\n\n\n\n\nEstimating the affected population using the WorldPop dataset\nShowing the desertification level layer alone is not insightful for the user as most of the country‚Äôs land cover is dominated by the existing Sahara desert that is uninhabited. Therefore, we want to visualise desertification risk only in areas with population by intersecting the newly created DRI later with the population density layer (WorldPop Population estimates of 2020 used as this was the most recent)\n// Population Raster from WorldPop\nvar pop_agesex = ee.ImageCollection('WorldPop/GP/100m/pop_age_sex')\n    .filter(ee.Filter.eq('country', 'NER'))\n    .filter(ee.Filter.calendarRange(2020, 2020, 'year')) //2020 latest year\n\n// Mask out uninhabited land\nfunction maskZeroValues(image) {\n    return image.updateMask(image.select('population').gt(0.025)); // Hide low values \n}\nvar pop_agesex_masked = pop_agesex.map(maskZeroValues);\n\n// Find intersection (affected population)\nvar dri_masked = composite_annual_masked.select('DRI')\n    .filter(ee.Filter.eq('year', 2023))\n    .first(); // Default year 2023\n\n// Create intersection image for population density\nvar intersectionMask = pop_agesex_masked.first().mask().and(dri_masked.mask());\nvar intersectionImage = pop_agesex_masked.first().updateMask(intersectionMask);\n\n// Create intersection image for DRI\nvar intersectionMask_DRI = dri_masked.mask().and(pop_agesex_masked.select('population').first().mask());\nvar intersectionImage_DRI = dri_masked.updateMask(intersectionMask_DRI);\nThis code results in the creation of 2 layers that highlight the extent of desertification specifically in populated areas, one shows the DRI values and the other shows the population density.\n\n\n\nDesertification in populated areas only (i.e.¬†High-risk areas). Left: visualised by DRI values. Right: Visualised by Population Density.\n\n\n\n\nStatistics and graphs for the Year and Area of interest\nBesides producing the layers, the app affords users with key interaction components such as zooming into the year and area of interest, from which relevant stats and graphs are produced. Note that the code examples below are not comprehensive and serve only to highlight key components of the UI.\nFor the interface we used a split-panel approach. The left-hand panel allows the user to pick the year of interest via a slider\n// Create the Year Slider\nvar Yearslider = ui.Slider({\n    min: 2014,\n    max: 2023,\n    value: 2023,\n    step: 1,\n    onChange: updateLayer\n});\nYearslider.style().set('stretch', 'horizontal');\n\n// Formula to update the layer upon year change\nfunction updateLayer() {\n    var selectedYear = Yearslider.getValue(); // Get the full date object\n    var filteredImage_DRI = composite_annual_masked.select('DRI')\n        .filter(ee.Filter.eq('year', selectedYear))\n        .first();\n    var intersectionMask = pop_agesex_masked.first().mask().and(dri_masked.mask());\n    var intersectionImage = pop_agesex_masked.first().updateMask(intersectionMask);\n\n    // Update the existing layer every time a new year is chosen\n    Map.layers().set(0, ui.Map.Layer(intersectionImage, {}, 'High-risk areas (Pop. Density) in ' + selectedYear, false));\n    Map.layers().set(1, ui.Map.Layer(intersectionImage_DRI.select('DRI'), driVisParams, 'High-risk areas (DRI) in ' + selectedYear));\n    Map.layers().set(2, ui.Map.Layer(filteredImage_DRI.reduce(ee.Reducer.mean()), driVisParams, 'Overall Desertification Level in ' + selectedYear, false));\n}\nIt also enables the user to select an area of interest in one of two ways:\n\nThe dropdown menu allows you to click on one of the 8 administrative regions within the country\n\n// Extract names\nvar namesList = niger_1.aggregate_array('ADM1_NAME').getInfo();\nnamesList = namesList.filter(function(name) {\n    return name !== null && name !== \"\";\n});\n// Create dropdown \nvar dropdown_menu = ui.Select({\n    items: namesList,\n    placeholder: 'Select a region',\n    onChange: function(selectedName) {\n        if (!selectedName) {\n            print('No region selected or invalid selection.');\n            return;\n        }\n        var selectedFeature = niger_1.filter(ee.Filter.eq('ADM1_NAME', selectedName));\n\n        selectedFeature.geometry().evaluate(function(geometry) {\n            //zoom to the region\n            Map.centerObject(ee.Geometry(geometry), 6.5);\n            //highlight the selected region\n            var region_outline = ee.Image().byte().paint({\n                featureCollection: selectedFeature,\n                width: 2,\n                color: 'purple'\n            });\n            Map.layers().set(5, ui.Map.Layer(region_outline, {}, 'Region: ' + selectedName));\n        });\n    }\n});\n\nThe user can choose to draw a point-based polygon directly onto the map to zoom into particular areas that are otherwise not distinguishable by region.\n\n// Add in draw polygon feature\nvar drawingTools = Map.drawingTools();\ndrawingTools.setShown(false);\n\nvar drawButton = ui.Button({\n    label: \"‚úèÔ∏è\" + \" Draw an area\",\n    onClick: drawPolygon,\n    style: {\n        stretch: \"horizontal\",\n        color: 'F08F42'\n    }\n});\n\nfunction drawPolygon() {\n    // Clear geoms\n    var layers = Map.drawingTools().layers();\n    layers.reset()\n        // draw\n    drawingTools.setShape(\"polygon\");\n    drawingTools.draw();\n}\nOnce an area of interest has been identified, the right-hand panel will generate the relevant stats and graphs related to the desertification index (as shown on the map), population growth, and the percentage of the population that live in desertified land. The code chunk below is an example from the callback function for the dropdown menu, with the polygon drawing tool sharing similar callbacks.\n// Set a callback function for when the user selects a boundary\ndropdown.widgets().get(1).onChange(function(selectedName) {\n    if (!selectedName) {\n        print('No region selected or invalid selection.');\n        return;\n    }\n\n    var selectedBoundary = niger_1.filter(ee.Filter.eq('ADM1_NAME', selectedName));\n\n    selectedBoundary.geometry().evaluate(function(geometry) {\n        //Chart of DRI over time\n        var chart1 = ui.Chart.image.series({\n            imageCollection: composite_annual.select('DRI'),\n            region: ee.Geometry(geometry),\n            reducer: ee.Reducer.mean(),\n            scale: 3000,\n        }).setOptions({\n            title: 'DRI change over time',\n            vAxis: {\n                title: 'DRI'\n            },\n            lineWidth: 1,\n            color: 'E35F27',\n            pointSize: 3,\n        });\n\n        // Chart of population over time for the selected region.\n        var chart2 = ui.Chart.image.series({\n                imageCollection: pop_masked,\n                region: ee.Geometry(geometry),\n                reducer: ee.Reducer.sum(),\n                scale: 300,\n                xProperty: 'year'\n            }).setSeriesNames(['Pop'])\n            .setOptions({\n                title: 'Population growth in selected area',\n                vAxis: {\n                    title: 'Population'\n                },\n                hAxis: {\n                    title: 'Year'\n                },\n                lineWidth: 1,\n                pointSize: 3,\n                series: {\n                    0: {\n                        color: 'orange'\n                    }\n                }\n            });\n\n        // Print the avg DRI value\n        var driValue = composite_annual\n            .filter(ee.Filter.eq('year', Yearslider.getValue()))\n            .median()\n            .reduceRegion({\n                reducer: ee.Reducer.mean(),\n                geometry: ee.Geometry(geometry),\n                scale: 3000,\n                bestEffort: true\n            })\n            .get('DRI');\n        var round_driValue = (ee.Number(driValue).multiply(1000)).round().divide(1000).getInfo()\n\n\n        // Print the affected pop value\n        var sum_pop_affected = intersectionImage.reduceRegion({\n            reducer: ee.Reducer.sum(),\n            geometry: ee.Geometry(geometry),\n            scale: 100, // Adjust scale to 100 to fit WorldPop resolution\n            maxPixels: 1e13,\n            bestEffort: true\n        });\n        print('Total population affected:', sum_pop_affected);\n\n        // Print the pop value\n        var sum_pop = pop_agesex.median().reduceRegion({\n            reducer: ee.Reducer.sum(),\n            geometry: ee.Geometry(geometry),\n            scale: 100, // Adjust scale to 100 to fit WorldPop resolution\n            maxPixels: 1e13,\n            bestEffort: true\n        });\n        print('Total population:', sum_pop);\n\n        var pct_affected = ee.Number(sum_pop_affected.get('population'))\n            .divide(ee.Number(sum_pop.get('population')))\n            .multiply(10000).round() // Round to 2 decimal places\n            .divide(100); // get %\n        print(pct_affected);\n\n\n        // Add/replace widget\n        rightPanel.widgets().set(2, ui.Label('Selected region: ' + selectedName));\n        rightPanel.widgets().set(3, ui.Label('Average DRI in ' + Yearslider.getValue() + ' is ' + round_driValue));\n        rightPanel.widgets().set(4, ui.Label(pct_affected.getInfo() + '% of the population in ' + selectedName + ' live on highly degraded land (DRI &gt; 0.5)'));\n        rightPanel.widgets().set(5, chart1);\n        rightPanel.widgets().set(6, chart2);\n    });\n});\nLast but not least, we created a Clear button to remove the drawn polygon, and a Reset button to reset the map to the initial state.\n// Add Clear Geom button\nvar clearButton = ui.Button({\n    label: 'Clear',\n    onClick: clearGeometryAndDisableDrawing\n});\n\nfunction clearGeometryAndDisableDrawing() {\n    var layers = Map.drawingTools().layers();\n    layers.reset();\n    Map.drawingTools().setShape(null);\n}\n\n// Add Reset button to initial state\nvar resetButton = ui.Button({\n    label: 'Reset',\n    onClick: reset\n});\n\nfunction reset() {\n    var layerToRemove = Map.layers().get(5)\n    if (layerToRemove) {\n        Map.remove(layerToRemove)\n    }\n    dropdown_menu.setValue(null);\n    Map.centerObject(niger, 5);\n    clearGeometryAndDisableDrawing()\n}\n\n\n\nThe app‚Äôs UI after the year and area of interest have been indicated"
  },
  {
    "objectID": "index.html#iv.-references",
    "href": "index.html#iv.-references",
    "title": "Monitoring desertification risk in Niger",
    "section": "IV. References",
    "text": "IV. References\nUSGS: Landsat Missions (n.d.). Landsat Modified Soil Adjusted Vegetation Index | U.S. Geological Survey. [online] www.usgs.gov. Available at: https://www.usgs.gov/landsat-missions/landsat-modified-soil-adjusted-vegetation-index [Accessed 21 Apr.¬†2024].\nYale (n.d.). How to convert Landsat DNs to albedo | Center for Earth Observation. [online] Center for Earth Observation. Available at: https://yceo.yale.edu/how-convert-landsat-dns-albedo [Accessed 21 Apr.¬†2024].\nYang, Z., Gao, X., Lei, J., Meng, X. and Zhou, N. (2022). Analysis of spatiotemporal changes and driving factors of desertification in the Africa Sahel. CATENA, 213, p.106213. doi:https://doi.org/10.1016/j.catena.2022.106213.\nWen, Ye & Guo, Bing & Zang, Wenqian & Ge, Dazhuan & Luo, Wei & Zhao, Huihui. (2020). Desertification detection model in Naiman Banner based on the albedo-modified soil adjusted vegetation index feature space using the Landsat8 OLI images. Geomatics, Natural Hazards and Risk. 11. 544-558. 10.1080/19475705.2020.1734100.\nWu, Z., Lei, S., Bian, Z.¬†et al.¬†Study of the desertification index based on the albedo-MSAVI feature space for semi-arid steppe region.¬†Environ Earth Sci¬†78, 232 (2019). https://doi.org/10.1007/s12665-019-8111-9"
  },
  {
    "objectID": "index.html#i.-the-overview",
    "href": "index.html#i.-the-overview",
    "title": "Monitoring desertification risk in Niger",
    "section": "I. The Overview",
    "text": "I. The Overview\n\nProblem Statement\nNiger, a landlocked country in Africa‚Äôs Sahel region, faces rising temperatures, low rainfall and a decrease in arable land, indicative of desertification. The shrinking land and water sources pose food and water security threats, risking humanitarian crises and conflicts. Initiatives like Action Against Desertification (FAO-UN) with its flaghsip project the Great Green Wall aim to restore degraded land and push back the desert.\nHowever, as each task force operates independently, the nation lacks centralised visibility on nationwide desertification risks, making it difficult to mobilise the action plan with urgency and prioritise resources across diverse actors to the communities most in need.\n\n\nEnd User\nThis application is meant for the local government, NGOs and different organisations so that there is a centralised platform where they can visualise to what extent desertification affects Niger people at high spatial resolution and which areas are seeing desertification worsen over the past decade.\n\n\nData Source\nThree remote sensing Google Earth Engine data sets are used:\n\nTo derive the Desertification Risk Index (detailed methodology below), we used Landsat 8 OLI hyperspectral remote sensing data (2014-2023) containing all the necessary spectral bands for index calculation.\nTo quantify the affected population, we used the WorldPop global population raster data at 100m resolution (2000-2020).\nFinally, to delineate the boundaries of interest, we will use Niger Administrative Boundaries, Level 0 and Level 1.\n\n\n\nMethodology\nAccording to Wu et al.¬†(2019) and Yang et al.¬†(2020), the Desertification Risk Index (DRI), which we have extracted from their Desert Matter Index (DMI), can be calculated using Landsat-8 remote sensing data, from which Albedo and Modified Soil Adjusted Vegetation Index (MSAVI) were calculated. according to the formula:\n\\[ DRI = L_1 = \\sqrt{(MSAVI-1)^2 + Albedo^2} \\]\nThis formula produces values where a higher DRI indicates greater risk of desertification. The use of Euclidean distance in this formula combines the deviations of MSAVI and albedo from their norms, providing a measure that is sensitive to changes in both vegetation cover and surface reflectivity.\n\n\n\nA larger DRI means more degraded soil and higher desertification risk.\n\n\nIt is worth noting that this methodology has shown relatively high accuracy in detecting and classifying desertification in the Naiman Banner in Inner Mongolia (China) but not specifically in the Southern Sahel where Niger is located. However, thanks to the fact that the two areas share similar characteristics in terms of wetness and vegetation, we see the application of this methodology as appropriate for the Southern Sahel region.\n\n\nInterface\nThe user can select the year of interest and then the area of interest to produce various map layers and statistics:\n\nBy default, the map of high-risk areas will be shown, indicating the desertification level only in populated areas, excluding uninhabited lands such as the inner section of the Sahara Desert to the north.\nWhen a region is selected, or an area of interest is drawn, statistics on the average DRI value and the percentage of the affected population will be shown. The user can redraw the area or reset the map anytime.\n\nFinally, other layers of interest are (1) Population density in high-risk areas, (2) DRI nationwide in the year of choice, and (3) Change in DRI nationwide 2014-2023."
  },
  {
    "objectID": "index.html#iii.-the-codes",
    "href": "index.html#iii.-the-codes",
    "title": "Monitoring desertification risk in Niger",
    "section": "III. The codes",
    "text": "III. The codes\nHere are some highlights of what goes on behind the scene of the web app.fontS\n\nCalculating Desertification Risk Index 2014-2023 from Landsat-8 dataset\nFirst, we load the necessary Landsat 8 collection and the boundaries of Niger (level 1 and 0)\n// Load country boundaries\nvar niger = ee.FeatureCollection(\"FAO/GAUL/2015/level0\").filter(ee.Filter.eq('ADM0_CODE', 181));\nvar niger_1 = ee.FeatureCollection(\"FAO/GAUL/2015/level1\").filter(ee.Filter.eq('ADM0_CODE', 181));\nvar nigerGeometry = niger.geometry(); // Convert niger to a geometry for clipping.\nMap.centerObject(niger, 5); // Center the map over Niger\nMap.setOptions('HYBRID')\n\n// Load and filter collection for time period, extent, indices and cloud cover,\nvar composite = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')\n              .filterDate('2014-01-01','2023-12-31')\n              .filterBounds(niger)\n              .select(['SR_B[0-9]*'])\n              ;\nAs explained above, the formula for DRI is:\n\\[ DRI = \\sqrt{(MSAVI-1)^2 + Albedo^2} \\]\nwhere:\n\nAlbedo is a measure of the reflectivity of the Earth‚Äôs surface, ranging from 0 (no reflectivity) to 1 (total reflectivity). It helps understand the Earth‚Äôs energy balance as it indicates how much solar radiation is absorbed versus reflected back into space (Yale, n.d.). High albedo values correlate with highly reflective surfaces (such as flat deserts or snow terrains); low values correlate with poorly reflecting surfaces (such as dense forestation).\n\n\\[ Albedo = 0.356B_{blue} + 0.13B_{red} + 0.373B_{nir} + 0.085B_{swir1} + 0.072B_{swir2} - 0.0018 \\]\n\nModified Soil Adjusted Vegetation Index (MSAVI) is designed to minimise the impact of soil brightness when vegetation is sparse, providing a more accurate vegetation signal. This index is particularly useful in semi-arid regions, such as Niger, where exposed soil can significantly affect the standard vegetation indices like NDVI. Since, it ranges from -1 (non-vegetated areas or sparse vegetation) to 1 (higher levels of vegetation and vegetation health), we adapt this by adding 1 to the value and dividing by 2 to normalise to the 0 to 1 range (same as albedo).\n\n\\[ MSAVI = \\frac{2B_{nir} + 1 - \\sqrt{(2B_{nir} + 1)^2 - 8(B_{nir}-B_{red})}}2 \\]\nThe code below creates a function, which performs the calculation of DRI for the Landsat 8 collection.\n// Function to calculate DRI\nvar calculateIndices = function(image) {\n    // Calculate MSAVI\n    var msavi = image.expression(\n        '(((2 * B5 + 1 - sqrt((2 * B5 + 1)**2 - 8 * (B5 - B4))) / 2) +1)/2', {\n            'B5': image.select('SR_B5'), // NIR\n            'B4': image.select('SR_B4') // Red\n        }).rename('msavi');\n    // MSAVI is the Modified Soil Adjusted Vegetation Index; minimizes the effect of bare soil on the SAVI. Refer to Yang et al (2022).\n    // This equation modifies the typical equation to account for the typical MSAVI range being -1:1; this adapts it to 0:1 by adding 1 to the value and dividing by 2. \n\n    // Calculate Albedo\n    var albedo = image.expression(\n        '((0.356*B2) + (0.130*B4) + (0.373*B5) + (0.085*B6) + (0.072*B7) - 0.0018)*0.0000275 - 0.2', { // adjustments normalise the index to be 0 to 1\n            'B2': image.select('SR_B2'), // Blue\n            'B4': image.select('SR_B4'), // Red\n            'B5': image.select('SR_B5'), // NIR\n            'B6': image.select('SR_B6'), // SWIR1\n            'B7': image.select('SR_B7') // SWIR2\n        }).rename('albedo');\n    // ALbedo gives the proportion of the incident light or radiation that is reflected by a surface. Refer to Yang et al (2022).\n\n    // Calculate DRI\n    var dri = image.expression(\n        'sqrt( (MSAVI - 1)**2 + (Albedo)**2 )/sqrt(2)', {\n            'MSAVI': msavi, // Use the MSAVI band calculated previously\n            'Albedo': albedo // Use the Albedo band calculated previously\n        }).rename('DRI');\n    // DRI formula extracted from Wen et al (2020) and adapted slightly; uses DMI formula. Divide by sqrt(2) to normalise it to 0-1.\n\n    // Return the image with added DRI band\n    return image.addBands([dri, msavi, albedo]).clip(nigerGeometry);\n};\nBefore we applied this function to the collection, we decided to simplify the collection to one image per year to reduce load time whenever a query is made.\n// Simplify collection to years (median) and calculate indices \nvar distinctYears = ee.List.sequence(2014, 2023);\n\nfunction annualComposite(year, month) {\n    var filteredImages = composite.filter(ee.Filter.calendarRange(year, year, 'year'))\n    return filteredImages.median().set({\n        'year': year,\n        'system:time_start': ee.Date.fromYMD(year, 1, 1)\n    });\n}\n\nvar composite_annual = ee.ImageCollection.fromImages(\n    distinctYears.map(function(year) {\n        return annualComposite(year);\n    }).flatten()\n).map(calculateIndices);\nAfter we applied the index calculation, we masked out DRI values less than 0.25 to highlight areas with high risk of desertification.\n// Mask images based on DRI values, highlighted high DRI areas only, excluding first quartile\nfunction maskByDRI(image) {\n    var driMask = image.select('DRI').gte(0.25);\n    return image.updateMask(driMask);\n}\nvar composite_annual_masked = composite_annual.map(maskByDRI);\nWe also added a legend for the DRI value with the corresponding colour scale.\n// Color palette to viz params function\nfunction makeColorBarParams(palette) {\n    return {\n        bbox: [0, 0, 1, 0.1],\n        dimensions: \"100x10\",\n        format: \"png\",\n        min: 0,\n        max: 1,\n        palette: palette.reverse(),\n    };\n}\n\n// Create the color bar for the legend.\nvar colorBar = ui.Thumbnail({\n    image: ee.Image.pixelLonLat().select(0),\n    params: makeColorBarParams(colorlist.reverse()),\n    style: {\n        stretch: \"horizontal\",\n        margin: \"0px 2px\",\n        maxHeight: \"18px\"\n    },\n});\n\n// Create title\nvar legendTitle = ui.Label({\n    value: \"Desertification Risk Index (DRI)\",\n    style: {\n        fontWeight: \"bold\",\n        textAlign: \"center\",\n        stretch: \"horizontal\"\n    },\n});\n\n// Create labels\nvar legendLabels = ui.Panel({\n    widgets: [\n        ui.Label('Low', {\n            margin: \"4px 4px\"\n        }),\n        ui.Label(\" \", {\n            margin: \"4px 4px\",\n            textAlign: \"center\",\n            stretch: \"horizontal\",\n        }),\n        ui.Label('High', {\n            margin: \"4px 4px\"\n        }),\n    ],\n    layout: ui.Panel.Layout.flow(\"horizontal\"),\n});\n\n// Put everything together and add to map\nvar legendPanel = ui.Panel({\n    widgets: [legendTitle, colorBar, legendLabels],\n    style: {\n        position: \"bottom-center\",\n        width: \"300px\"\n    },\n});\n\nMap.add(legendPanel)\n\n\n\nHigh DRI areas with values below 0.25 masked out\n\n\nFinally, to show the change in DRI in the past decade, we also produced a layer for the difference in the DRI across all pixels between 2023 and 2014. From this layer, it is clear to see rapid desertification around the population centres such as Niamey in the southern region. However, areas in the southeastern region around Lake Chad and on the western border with Mali, there seems to be a reversal of desertification.\n// Difference in DRI between 2023 and 2014\nvar image2014 = composite_annual.select('DRI').filterDate('2014-01-01', '2014-12-31').median();\nvar image2023 = composite_annual.select('DRI').filterDate('2023-01-01', '2023-12-31').median();\n\n// Calculate the difference image, mask out small change (within 0.01)\nvar differenceImage = image2023.subtract(image2014);\nvar diff_img = differenceImage.updateMask(differenceImage.gt(0.01).or(differenceImage.lt(-0.01)));\n\n\n\nChange in DRI 2014-2023, with small changes within 0.01 unit filtered out. Darker pixels see an increase, while lighter ones see a decrease in DRI.\n\n\n\n\nEstimating the affected population using the WorldPop dataset\nShowing the desertification level layer alone is not insightful for the user as most of the country‚Äôs land cover is dominated by the existing Sahara desert that is uninhabited. Therefore, we want to visualise desertification risk only in areas with population by intersecting the newly created DRI later with the population density layer (WorldPop Population estimates of 2020 used as this was the most recent)\n// Population Raster from WorldPop\nvar pop_agesex = ee.ImageCollection('WorldPop/GP/100m/pop_age_sex')\n    .filter(ee.Filter.eq('country', 'NER'))\n    .filter(ee.Filter.calendarRange(2020, 2020, 'year')) //2020 latest year\n\n// Mask out uninhabited land\nfunction maskZeroValues(image) {\n    return image.updateMask(image.select('population').gt(0.025)); // Hide low values \n}\nvar pop_agesex_masked = pop_agesex.map(maskZeroValues);\n\n// Find intersection (affected population)\nvar dri_masked = composite_annual_masked.select('DRI')\n    .filter(ee.Filter.eq('year', 2023))\n    .first(); // Default year 2023\n\n// Create intersection image for population density\nvar intersectionMask = pop_agesex_masked.first().mask().and(dri_masked.mask());\nvar intersectionImage = pop_agesex_masked.first().updateMask(intersectionMask);\n\n// Create intersection image for DRI\nvar intersectionMask_DRI = dri_masked.mask().and(pop_agesex_masked.select('population').first().mask());\nvar intersectionImage_DRI = dri_masked.updateMask(intersectionMask_DRI);\nThis code results in the creation of 2 layers that highlight the extent of desertification specifically in populated areas, one shows the DRI values and the other shows the population density.\n\n\n\nDesertification in populated areas only (i.e.¬†High-risk areas). Left: visualised by DRI values. Right: Visualised by Population Density.\n\n\n\n\nStatistics and graphs for the Year and Area of interest\nBesides producing the layers, the app affords users with key interaction components such as zooming into the year and area of interest, from which relevant stats and graphs are produced. Note that the code examples below are not comprehensive and serve only to highlight key components of the UI.\nFor the interface we used a split-panel approach. The left-hand panel allows the user to pick the year of interest via a slider\n// Create the Year Slider\nvar Yearslider = ui.Slider({\n    min: 2014,\n    max: 2023,\n    value: 2023,\n    step: 1,\n    onChange: updateLayer\n});\nYearslider.style().set('stretch', 'horizontal');\n\n// Formula to update the layer upon year change\nfunction updateLayer() {\n    var selectedYear = Yearslider.getValue(); // Get the full date object\n    var filteredImage_DRI = composite_annual_masked.select('DRI')\n        .filter(ee.Filter.eq('year', selectedYear))\n        .first();\n    var intersectionMask = pop_agesex_masked.first().mask().and(dri_masked.mask());\n    var intersectionImage = pop_agesex_masked.first().updateMask(intersectionMask);\n\n    // Update the existing layer every time a new year is chosen\n    Map.layers().set(0, ui.Map.Layer(intersectionImage, {}, 'High-risk areas (Pop. Density) in ' + selectedYear, false));\n    Map.layers().set(1, ui.Map.Layer(intersectionImage_DRI.select('DRI'), driVisParams, 'High-risk areas (DRI) in ' + selectedYear));\n    Map.layers().set(2, ui.Map.Layer(filteredImage_DRI.reduce(ee.Reducer.mean()), driVisParams, 'Overall Desertification Level in ' + selectedYear, false));\n}\nIt also enables the user to select an area of interest in one of two ways:\n\nThe dropdown menu allows you to click on one of the 8 administrative regions within the country\n\n// Extract names\nvar namesList = niger_1.aggregate_array('ADM1_NAME').getInfo();\nnamesList = namesList.filter(function(name) {\n    return name !== null && name !== \"\";\n});\n// Create dropdown \nvar dropdown_menu = ui.Select({\n    items: namesList,\n    placeholder: 'Select a region',\n    onChange: function(selectedName) {\n        if (!selectedName) {\n            print('No region selected or invalid selection.');\n            return;\n        }\n        var selectedFeature = niger_1.filter(ee.Filter.eq('ADM1_NAME', selectedName));\n\n        selectedFeature.geometry().evaluate(function(geometry) {\n            //zoom to the region\n            Map.centerObject(ee.Geometry(geometry), 6.5);\n            //highlight the selected region\n            var region_outline = ee.Image().byte().paint({\n                featureCollection: selectedFeature,\n                width: 2,\n                color: 'purple'\n            });\n            Map.layers().set(5, ui.Map.Layer(region_outline, {}, 'Region: ' + selectedName));\n        });\n    }\n});\n\nThe user can choose to draw a point-based polygon directly onto the map to zoom into particular areas that are otherwise not distinguishable by region.\n\n// Add in draw polygon feature\nvar drawingTools = Map.drawingTools();\ndrawingTools.setShown(false);\n\nvar drawButton = ui.Button({\n    label: \"‚úèÔ∏è\" + \" Draw an area\",\n    onClick: drawPolygon,\n    style: {\n        stretch: \"horizontal\",\n        color: 'F08F42'\n    }\n});\n\nfunction drawPolygon() {\n    // Clear geoms\n    var layers = Map.drawingTools().layers();\n    layers.reset()\n        // draw\n    drawingTools.setShape(\"polygon\");\n    drawingTools.draw();\n}\nOnce an area of interest has been identified, the right-hand panel will generate the relevant stats and graphs related to the desertification index (as shown on the map), mean DRI value, change of DRI 2014-2023, population growth, and the percentage of the population that live in desertified land. The code chunk below is an example from the callback function for the dropdown menu, with the polygon drawing tool sharing similar callbacks.\n// Set a callback function for when the user selects a boundary\ndropdown.widgets().get(1).onChange(function(selectedName) {\n    if (!selectedName) {\n        print('No region selected or invalid selection.');\n        return;\n    }\n\n    var selectedBoundary = niger_1.filter(ee.Filter.eq('ADM1_NAME', selectedName));\n\n    selectedBoundary.geometry().evaluate(function(geometry) {\n        //Chart of DRI over time\n        var chart1 = ui.Chart.image.series({\n            imageCollection: composite_annual.select('DRI'),\n            region: ee.Geometry(geometry),\n            reducer: ee.Reducer.mean(),\n            scale: 3000,\n        }).setOptions({\n            title: 'DRI change over time',\n            vAxis: {\n                title: 'DRI'\n            },\n            lineWidth: 1,\n            color: 'E35F27',\n            pointSize: 3,\n        });\n\n        // Chart of population over time for the selected region.\n        var chart2 = ui.Chart.image.series({\n                imageCollection: pop_masked,\n                region: ee.Geometry(geometry),\n                reducer: ee.Reducer.sum(),\n                scale: 300,\n                xProperty: 'year'\n            }).setSeriesNames(['Pop'])\n            .setOptions({\n                title: 'Population growth in selected area',\n                vAxis: {\n                    title: 'Population'\n                },\n                hAxis: {\n                    title: 'Year'\n                },\n                lineWidth: 1,\n                pointSize: 3,\n                series: {\n                    0: {\n                        color: 'orange'\n                    }\n                }\n            });\n\n        // Print the avg DRI value\n        var driValue = composite_annual\n            .filter(ee.Filter.eq('year', Yearslider.getValue()))\n            .median()\n            .reduceRegion({\n                reducer: ee.Reducer.mean(),\n                geometry: ee.Geometry(geometry),\n                scale: 3000,\n                bestEffort: true\n            })\n            .get('DRI');\n        var round_driValue = (ee.Number(driValue).multiply(1000)).round().divide(1000).getInfo()\n\n\n        // Print the affected pop value\n        var sum_pop_affected = intersectionImage.reduceRegion({\n            reducer: ee.Reducer.sum(),\n            geometry: ee.Geometry(geometry),\n            scale: 100, // Adjust scale to 100 to fit WorldPop resolution\n            maxPixels: 1e13,\n            bestEffort: true\n        });\n        print('Total population affected:', sum_pop_affected);\n\n        // Print the pop value\n        var sum_pop = pop_agesex.median().reduceRegion({\n            reducer: ee.Reducer.sum(),\n            geometry: ee.Geometry(geometry),\n            scale: 100, // Adjust scale to 100 to fit WorldPop resolution\n            maxPixels: 1e13,\n            bestEffort: true\n        });\n        print('Total population:', sum_pop);\n\n        var pct_affected = ee.Number(sum_pop_affected.get('population'))\n            .divide(ee.Number(sum_pop.get('population')))\n            .multiply(10000).round() // Round to 2 decimal places\n            .divide(100); // get %\n        print(pct_affected);\n\n\n        // Change DRI value\n        var diff_stat = differenceImage.reduceRegion({\n            reducer: ee.Reducer.mean(),\n            geometry: ee.Geometry(geometry),\n            scale: 1000, //\n            maxPixels: 1e13,\n            bestEffort: true\n        })\n        \n        diff_stat = ee.Number(diff_stat.get('DRI'))\n                      .multiply(100000).round().divide(100000).getInfo() // Round to 5 decimal places\n        // ;\n        print('DRI change 2014-2023: ', diff_stat);\n\n\n        // Add/replace widget\n        rightPanel.widgets().set(2, ui.Label('Selected region: ' + selectedName, {\n            fontSize: '12px'\n        }));\n        rightPanel.widgets().set(3, ui.Label('Average DRI in ' + Yearslider.getValue() + ' is ' + round_driValue + ', and the average change in DRI 2014-2023 is ' + diff_stat, {\n            fontSize: '12px'\n        }));\n        rightPanel.widgets().set(4, ui.Label(pct_affected.getInfo() + '% of the population in ' + selectedName + ' live on highly degraded land', {\n            fontSize: '12px'\n        }));\n        rightPanel.widgets().set(5, chart1);\n        rightPanel.widgets().set(6, chart2);\n    });\n});\nLast but not least, we created a Clear button to remove the drawn polygon, and a Reset button to reset the map to the initial state.\n// Add Clear Geom button\nvar clearButton = ui.Button({\n    label: 'Clear',\n    onClick: clearGeometryAndDisableDrawing\n});\n\nfunction clearGeometryAndDisableDrawing() {\n    var layers = Map.drawingTools().layers();\n    layers.reset();\n    Map.drawingTools().setShape(null);\n}\n\n// Add Reset button to initial state\nvar resetButton = ui.Button({\n    label: 'Reset',\n    onClick: reset\n});\n\nfunction reset() {\n    var layerToRemove = Map.layers().get(5)\n    if (layerToRemove) {\n        Map.remove(layerToRemove)\n    }\n    dropdown_menu.setValue(null);\n    Map.centerObject(niger, 5);\n    clearGeometryAndDisableDrawing()\n}\n\n\n\nThe app‚Äôs UI after the year and area of interest have been indicated"
  }
]